
javax.validation.constraints.AssertFalse.message = tiene que ser falso
javax.validation.constraints.AssertTrue.message  = tiene que ser verdadero
javax.validation.constraints.DecimalMax.message  = El dato de entrada [{0}] tiene que ser menor ${inclusive == true ? 'o igual que ' : ''}{value}
javax.validation.constraints.DecimalMin.message  = El dato de entrada [{0}] tiene que ser mayor ${inclusive == true ? 'o igual que ' : ''}{value}
javax.validation.constraints.Digits.message      = El valor numérico del dato de entrada [{0}] está por fuera de los límites (se esperaba <{integer} dígitos>.<{fraction} dígitos)
javax.validation.constraints.Future.message      = El dato de entrada [{0}] tiene que ser una fecha posterior a la actual
javax.validation.constraints.Max.message         = El dato de entrada [{0}] tiene que ser menor o igual que {value}
javax.validation.constraints.Min.message         = El dato de entrada [{0}] tiene que ser mayor o igual que {value}
javax.validation.constraints.NotNull.message     = El dato de entrada [{0}] no puede ser null
javax.validation.constraints.Null.message        = El dato de entrada [{0}] tiene que ser null
javax.validation.constraints.Past.message        = El dato de entrada [{0}] tiene que ser una fecha anterior a la actual
javax.validation.constraints.Pattern.message     = El dato de entrada [{0}] tiene que corresponder a la expresión regular "{regexp}"
javax.validation.constraints.Size.message        = El tamaño del dato de entrada [{0}] tiene que estar entre {min} y {max}

org.hibernate.validator.constraints.CreditCardNumber.message = núAmero de tarjeta invá1lido
org.hibernate.validator.constraints.EAN.message                   = invalid {type} barcode
org.hibernate.validator.constraints.Email.message            = El dato de entrada [{0}] no es una dirección de correo electrónica bien formada
org.hibernate.validator.constraints.Length.message           = La longitud del dato de entrada ${validatedValue} tiene que estar entre {min} y {max}
org.hibernate.validator.constraints.LuhnCheck.message               = The check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message              = The check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message              = The check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message                = The check digit for ${validatedValue} is invalid, ${modType} checksum failed
org.hibernate.validator.constraints.NotBlank.message         = El dato de entrada [{0}] no puede estar vacío
org.hibernate.validator.constraints.NotEmpty.message         = El dato de entrada [{0}] no puede estar vacío
org.hibernate.validator.constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.Range.message            = El dato de entrada [{0}] tiene que estar entre {min} y {max}
org.hibernate.validator.constraints.SafeHtml.message         = El dato de entrada [{0}] puede tener un contenido html inseguro
org.hibernate.validator.constraints.ScriptAssert.message     = la expresión "{script}" no se ha evaluado a cierto
org.hibernate.validator.constraints.URL.message              = El dato de entrada [{0}] tiene que ser una URL válida

org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
org.hibernate.validator.constraints.br.CPF.message                  = invalid Brazilian individual taxpayer registry number (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.message      = invalid Brazilian Voter ID card number